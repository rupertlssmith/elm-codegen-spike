    prod case let case if begin default
    end end array cons case default let list cons
{
    default prod prod end
}
{
    then cons let list prod
}
case list in let
cons sum then let end
if list if if end prod begin begin begin prod sum
{
    list sum default where list sum sum
}
    list list end
    prod list cons then cons sum in default then
    let array array if then case end array if list
    default let begin array let then let end then then
    begin list default prod array let prod sum list prod
in cons end then end let
in default if
    cons begin prod default sum array prod
where sum sum let sum if case in end cons
    sum end case array array array case default array in
    case where in array prod then prod sum default array list
then case cons in prod where if if prod list
    end prod begin prod begin default then if default default case
    where prod in cons cons array in end array
{
    let prod then then prod
}
{
    if where list where array
}
{
    prod default default cons then where begin
}
end where end end prod prod cons array case if
{
    where begin then case end where then default sum default where let
}
    sum let cons end cons end in case default case list
array where default default sum cons in begin in prod prod in
{
    array default cons then cons
}
list array prod end where let where default in cons array prod
begin default then cons begin array default list
{
    let sum in case
}
    list end cons prod cons cons let in in sum array
    in default case end in let begin end cons list let begin
{
    case if default
}
    case then case prod array where let begin let sum array array
    sum default sum end prod let default where
end then default in begin let default
{
    in then begin case begin let end if where end
}
prod begin array begin prod if then
{
    array sum case
}
let default array let case default list
    begin if let
    begin list array
{
    if prod list end default list
}
{
    list where array then case if
}
{
    sum end list then then case end array if begin
}
    default case default cons list default then cons end array end
list prod if case prod in
    default in where in sum case let default
list array array prod list in sum prod in
then where default begin
    if then where sum if prod begin sum begin let
    where list if prod in
cons if array case list default array end case
    case where default
cons let begin where let if prod list cons
{
    prod where sum list prod let
}
    in default cons if if begin list
then cons let default let
where case prod in case
case default end default prod then where case begin
where where begin case default
    end end prod
{
    case case prod where prod case where prod list end let
}
    array in sum begin list if case
{
    cons case array sum if
}
{
    let begin in then if if where
}
    cons array case where
{
    case default cons sum prod cons let in sum begin where sum
}
end where begin prod prod then let case cons cons
in cons sum end case then end default where prod
{
    cons then in begin end in then
}
    then end let let in in end list list case default let
    prod begin case if if in prod if cons where then where
sum cons default where then
{
    in begin then where case array then list sum
}
    let if default let end if where begin
    array then array list prod
{
    cons then in prod sum array let end in case
}
    cons cons prod prod then sum where
list end default where in case case prod
{
    array case then array end sum default in list where array
}
in case sum
    prod sum then in where
{
    prod list where list
}
{
    where let cons sum where begin default where if default
}
case cons default array then end list sum let prod let
{
    end in then
}
{
    cons prod default end default in sum
}
    if begin prod sum if array cons prod in array then end
sum default if if let if sum cons if cons where then
    case in array cons if where
let case if where if array default list
    cons array in if cons prod then end begin sum let default
begin in then end default where end
{
    case let cons end
}
cons cons then array then if cons end
let begin begin default prod
then let let then list if list where begin begin
{
    in where in
}
    array array list then cons in case
{
    sum where default sum
}
begin cons cons cons let
{
    prod begin prod if where let then let then then
}
    then sum where then sum let
{
    where prod in
}
{
    array sum prod in sum array in sum begin case
}
default begin cons array prod array
    let in case default where cons sum if if in where end
    where case where list default prod list
{
    then where prod if if end let in in sum
}
prod sum array
cons cons if default begin then let array end array end end
{
    begin list if prod
}
cons sum then then where cons if let
    then if in where let let in begin begin where if
where default in end in
where prod array in cons case prod prod end begin prod
array where end let sum sum cons array array in
let array sum begin
    array case begin then sum array default prod array cons case
    if begin where array array let let begin case
{
    in prod case begin then
}
{
    where cons cons cons let prod
}
    case begin let begin let array array cons sum prod
cons then default where where array array
    default sum where let sum in list in if if array begin
end end in begin list in where cons then if let sum
    array array default default begin if
prod in case in then let sum case sum where
{
    let begin where
}
{
    if if sum then default cons array cons case list
}
then if array if let cons cons
{
    sum prod begin array array end in array where
}
{
    then in if end end list
}
prod default list if end cons in
{
    begin array in then if where
}
{
    let cons array if default end begin sum
}
{
    array list case default then then sum case default then
}
{
    list array case default where list in array in
}
list if case if where begin end array
{
    array if where list if list begin
}
prod if case sum default end begin let sum case
cons begin if sum array
list cons sum
prod end cons cons end end begin where
{
    cons array default
}
    in in let end if array end default in list where
prod then cons
case array array sum list list sum case cons begin
{
    array where array case let prod default end
}
    default cons then in where then default default
    list default let let sum list if case where
    prod where cons if prod prod sum cons default if
{
    case if case end sum begin default cons begin array
}
array then cons
{
    cons let prod array begin case array where
}
{
    where array default where cons
}
    array sum if let let in case array prod
case end if
{
    prod let where case
}
begin sum case case
{
    sum default case in case cons array cons
}
{
    then where prod
}
    let if prod cons sum if cons sum default list
{
    default prod cons if default case sum then list
}
    then then end list if then end default begin
    sum cons then case prod prod let then cons
    let cons array array
    default array cons array array list if cons
let sum sum let case in then prod begin list array array
{
    in case then prod array list list
}
{
    let begin in default then cons end where case cons if end
}
    cons list where default list array cons list where in then
    in begin where array prod case where sum cons
    prod if list then let let
    prod end default if if case list begin
{
    in if end then case cons array in begin default
}
    array list array
{
    case prod array default list array default case if array
}
{
    if let let begin list then
}
    in end let let cons end case array if
let begin if list begin in prod
    if case sum where sum
    prod if end list then end
    end case in then then case prod begin default sum cons
list default case array in cons let case
end in list list
    array end list array case cons default sum where prod
then begin default where list then end begin then
{
    in sum default default list case if sum end default where in
}
    in where begin let if begin
array let then begin cons in list cons where
    begin if begin if where then list case let case if if
    cons list array begin if begin
{
    in default then prod sum
}
    sum in cons case
{
    list let end
}
    where sum array sum begin if
    sum list case end end begin in then
case where array let array
    if default list case cons list where default in where
where cons if default begin sum begin list
    in array list let where begin where where
{
    in prod list where list if prod where in
}
    prod let begin array in cons case let list
{
    begin let if if cons where begin sum cons let if let
}
end array list list then in prod cons if default
list if case array then sum prod case cons begin default
{
    array case default let where prod end if end list then case
}
    begin end end if array
    let array if case in
    case list list array where default cons array cons
cons array where
{
    list then prod where begin sum end list let in
}
    let where cons end cons let begin then array in begin
    prod in then
{
    end prod where end sum
}
    array cons then then
end if if cons
{
    default cons in default prod list prod
}
{
    in in default array
}
default cons begin then list array in
    cons in where then array then where prod
{
    let cons case default
}
where if list cons array if case
array in case array list end
array list list list
    let begin list array begin list in where then in cons then
{
    if where begin case
}
    case if sum array array sum default
    let prod end then cons end if begin begin default sum
{
    where in list cons then prod case prod
}
default default default prod begin then if let let
    prod end case
end case begin default sum default case
then begin let end cons then
    in cons in then in let array
{
    then end cons
}
    sum if then prod
array if default default cons
{
    where prod where list in if let array
}
sum end where default let if case sum array array sum default
{
    end let in cons in list array prod
}
sum default default array
{
    sum end default case
}
    if end where list let
if default default list
    list if list prod in then cons array then case
{
    in array array array where
}
then end default if
{
    in array then
}
    if if case case list case
{
    let default case case begin array case in end where cons case
}
{
    end end cons default end sum
}
    if list cons list prod where let begin
{
    cons if end sum in sum
}
array sum cons
default case in
    if array where
case case array where list if begin
    let let cons where array list
    cons sum cons default in if where where cons
    case prod sum list if sum prod in case end
prod begin sum let prod in where end
    sum cons where let then then end let array
    list then cons then default prod case
{
    where default prod end let begin if let if prod let default
}
{
    array case cons cons sum
}
{
    array end prod sum array in list case
}
{
    begin sum sum where
}
    list case array prod then list cons sum
end sum end let cons then if in if end sum then
{
    if cons default begin let in array sum end
}
end prod where cons then sum where then case list then cons
where if default array if
{
    sum cons begin array default then where default end let in cons
}
begin list in begin end case array case if then begin
default end then
    if where let if sum case array begin begin
{
    prod default begin if default prod let then where in default
}
    in default list array cons list
    in in where begin in
default cons case then in prod default begin default
then prod let prod then array prod end list
    then list sum sum default then
then prod case begin if sum where begin where
cons default sum let then list
{
    sum in then begin begin where array
}
{
    cons array cons default list if if
}
{
    array then prod let default let cons let case prod if list
}
end in let let case array prod
{
    array case then prod list array sum then
}
{
    list where sum in
}
case end case sum prod cons array
in cons then then prod cons array list begin
    sum prod if begin prod begin list if
    default sum end where
{
    begin begin cons then list
}
prod array begin
    list let end cons default let array where prod begin in if
{
    in default sum default end if let in where default in
}
let then case default
    default in array let array
    cons begin if end list
where in default where case cons prod end sum end sum
    default array where default
default begin in case if where sum
{
    in case default where begin array
}
    if prod in default if let
array sum where end
if begin prod default end begin
    cons then end then if cons
sum begin let
    where cons if begin
    case where sum if array let prod if
cons end in array default case let sum array
    where begin case in array then where list if list list prod
{
    case in then prod begin let case array
}
    array then end array if
list array array list array where array list
    if end then begin in begin end array prod cons where in
then array case sum then in cons
    prod list then end then let then begin
    let array end prod list case sum begin end then case
    let list begin then in list case if
{
    sum array begin case
}
then in let array prod
then let begin let default where end end prod
    begin end default if begin begin then end in
    begin then list default in prod if if
where prod in
    case let sum end list cons prod then array
    let array where default then prod if begin if sum
    cons array prod
    let sum list in begin sum begin default list cons default
{
    where default array let prod case end list if in where
}
{
    default case list list sum let prod
}
    cons case begin case array list end array
{
    list in in prod end case cons end in
}
{
    prod if array array prod in let default let in where in
}
    sum where case default sum cons where sum
    let then then where default array array
{
    end cons end list list in let end sum sum array
}
in list in then
    prod let array default end sum prod
begin prod end end begin
let sum let
{
    where where case default begin default list list end sum case
}
    cons default then in sum prod where array where cons then in
{
    in list in array where in where in
}
    where prod case begin default let sum where
{
    sum where case prod default cons where sum where end
}
    prod sum list prod default
    default list begin begin list cons sum case list then
prod default cons end case
    let prod case list begin list in end
{
    cons where prod prod where then in
}
{
    default in cons default default where cons where default
}
{
    begin let prod
}
if prod if then cons begin cons array end array
{
    sum then begin where prod end prod array prod
}
{
    prod prod case case begin where sum
}
list begin let in list begin in cons in let array
sum prod cons let case array in cons cons where if
    if then cons
{
    array prod let let where prod list then
}
{
    case prod begin begin array cons case in prod
}
then end sum then list if then default end if
{
    then array in cons sum list if in begin let case cons
}
where default list if
let if begin array
    if in then array list prod prod prod end prod then
{
    cons let where sum list
}
    prod let let where case cons end in prod in
{
    list begin let default list where
}
then let cons end if if cons begin where array
{
    in prod if cons array default case end in cons case
}
prod sum in cons sum cons
then in then list case in where begin prod case case
    cons sum cons case if if case let end let
cons in list prod
    begin array sum cons
{
    if then where cons list end end default end array case prod
}
    begin sum list
    end then begin where if then where then where end where let
array begin then array where then sum where begin where case
{
    sum case default then sum sum end
}
let case then cons let list
    if where cons end default if case case
where in let where sum case begin cons list
    then default in end sum if
sum end prod begin prod list begin begin end case
{
    end in if if then
}
    in let sum let prod prod end
    where begin then default list array begin then then
    end if let in sum begin if where if in
let prod then where where let in end array case let
array if then
{
    prod cons prod prod in cons cons sum array begin sum
}
let let in case
cons array begin begin default let prod end array then case
{
    end let case array if array default end end
}
    let then begin array list case sum begin let default prod cons
array in where cons array begin let list default
{
    default list end
}
{
    end in where in then then array
}
{
    in let list
}
let array prod in default list default
    default array in cons if cons case then cons begin
{
    let if where begin list end begin prod
}
then end if where default
    array sum sum cons let if sum where array default begin
where end then end in then default case default
begin case case
in prod array cons then cons begin prod
prod begin if
{
    where default prod if array then default sum array prod
}
array case end
    cons cons where prod list prod if array array
    in where prod
    array cons end prod
in sum if list cons list where array array in then then
end let then list
where cons cons cons
    list case let sum then begin then let prod end prod
{
    then list in in default where
}
{
    case sum begin begin sum where list where default default
}
    then prod then default
begin list prod if
{
    let begin default let list
}
    then if cons end
{
    cons end begin in
}
end in begin
{
    list default case list list let sum default
}
prod end array prod where begin case
{
    case sum default default list if default prod begin in sum begin
}
{
    case begin list then
}
    sum where array cons default where end then sum end
let list case where end list then if
{
    if in let if sum sum
}
{
    then if if
}
begin let case cons in default then where if
{
    if if case cons if default where default sum case sum then
}
{
    sum cons default let begin where let cons
}
    where then case let
{
    default case array if end
}
end list list sum begin
{
    if sum prod
}
default in prod list list case in if let then case
{
    end array where in
}
{
    in where in let
}
    if begin where case default sum
if where end cons
{
    if case if where case end let case
}
{
    list case default let
}
if then in prod in
prod sum then then sum then prod sum default begin case case
{
    cons where array prod
}
prod then in default end where list sum if
cons if cons prod sum
    then if prod sum list cons begin if list list end case
{
    prod list list prod where default end
}
{
    then prod if case case then
}
{
    default default cons default let begin sum
}
{
    then end cons in list default begin list
}
    prod let default sum default
    array cons cons cons cons array if where end
{
    case sum array then cons begin where sum default
}
    let cons case let cons in then end then begin sum
{
    case sum where begin
}
    default in in array default list case where case case in sum
    list cons if if let end array array then let where
{
    list then list sum if end array begin
}
    end sum in case default sum if cons
{
    where array where list prod case then end then end let cons
}
{
    let sum then where default end where end in sum cons
}
end end if where list end in list list list
{
    default in list case then array then sum cons list
}
    begin let array end case
sum prod default sum default case if sum list let
default begin prod end
list let if in where list array prod
{
    let prod then
}
array default begin let sum then then then
if list case begin in default let list
list prod array
    prod list cons let
{
    sum list sum list
}
begin in sum case if where cons
{
    cons if then if then sum then
}
list sum end let in prod
    cons in cons let begin default cons in if
case in where default where then in where in then end cons
    where sum where case in if case list if
{
    cons case end array in
}
{
    where default where case sum cons sum then case where
}
end if in end end prod prod
    prod in in let
{
    then end case end
}
{
    default prod case where default prod list list prod prod end default
}
prod case then
{
    begin begin cons end prod
}
sum sum end array default
list if sum prod list prod where
{
    default cons where cons let if
}
{
    default array where list
}
prod array end list
default if in sum sum default case
case case in list array list in cons case sum
case where sum then
    in begin default where begin case
    if let case cons sum list default in where
list in array cons begin list begin in end case
    where then prod prod list sum where array then prod where
list array sum end begin then array end cons
{
    cons prod in case begin array begin if case end
}
    in begin case sum in cons array where case
{
    sum sum array sum begin if list end case then
}
    end cons where list sum case let array
{
    prod end if list where
}
cons let in if
list list let let where begin list let default end
{
    case end array let end prod begin
}
    array array let default array case default end prod
{
    default begin array end begin end default then sum let cons cons
}
{
    case where if let in
}
{
    then default sum cons cons end begin cons sum list in case
}
    array end end then cons in where prod prod default prod list
{
    then then let case then cons end where
}
default cons array begin list in default then sum sum where cons
    array if prod array
    cons cons sum case default let list cons prod end sum array
{
    cons list cons case sum
}
array array sum array let then array sum default
    let end if
let cons default list default let if if end case
sum then where in list
where prod end
{
    begin default end default where if end prod let if
}
    default in then cons prod default array let
    list end sum end list list
begin default end in sum where where prod where
    case default then default begin list cons array prod
{
    list where sum list sum cons
}
    list end case end begin sum where
list list in where array let cons
{
    cons then if case let if in array end
}
{
    let cons in prod array cons let
}
    let array then list cons begin in begin where begin
prod then sum where sum in
list begin begin
where case array let array then sum begin if array end
{
    sum then begin then begin
}
default begin let where sum case
{
    if prod default
}
{
    in where sum end cons if let default let if where
}
    array cons end
{
    list in sum default let let then prod where
}
default let case if array if end default prod in let end
    then array where prod case array case in
{
    case then sum end cons cons list
}
    sum where in prod let end then where begin case let
{
    list default begin if where let
}
let default prod default in array let let where prod
then case let end list
{
    default array default case begin end then where
}
{
    sum if end if cons end begin then
}
sum case prod list where in array sum end where where where
    sum begin then
    let array then then begin in
{
    if array in let case end let let
}
{
    prod sum end let default sum
}
case case where case let then if list
where cons default sum end cons
    prod if prod if if begin cons sum list begin where
cons end array let end default
    end cons then where let default let let
    default then where end sum if in sum default in
cons default let prod
if case let where if list array where array array
{
    if cons begin then default
}
let in begin case begin then then if if cons array
where let then then cons
{
    case if cons default array case case default
}
    let array in list default list array if cons
where array array default default array in then sum let default end
{
    list begin prod case in default where array
}
{
    then end where then case then prod end where
}
    default cons then array if
{
    array cons array if in cons case list prod begin case begin
}
{
    then in let
}
{
    case sum list cons prod
}
{
    array default if list prod
}
{
    then list default prod case sum begin default end sum array then
}
end prod cons then if if array then then end where prod
    then begin let let then end begin let then default prod
    end cons prod in then list default let let
list end then case cons begin prod array sum array
{
    in if list begin let where let cons begin case
}
{
    cons end if let
}
    then array case let where where in begin begin then
sum where where case case
cons end end list let case then
{
    list then list let
}
{
    let end if end sum begin list let
}
sum where sum in prod where begin list
if default array prod where then case let
    case end where then end list if array list where begin
{
    list prod sum in let case prod begin sum sum if begin
}
    list where sum array
    sum in array sum default let end then
if sum let end if then
{
    cons case begin default array prod prod
}
{
    cons array default if list where list if cons
}
default then cons if
default default list prod in cons array list case
    if end sum let list case sum then
    where let case if in case prod then list cons cons array
case prod let end
    begin then array if case in let if default
    in then default
if list let let cons in cons if
{
    begin list in end case where if default end case if begin
}
cons end begin case array in then in where where prod
{
    let case begin end sum list
}
cons array array if case list case case
    list list sum begin list default array end where where let array
default in where default begin if let case cons sum in
    begin end list if list then end default end
case if then if
    cons in end end
    in list if sum cons end let in
    sum then sum case
    cons begin end
{
    array array sum if in let case default case list sum
}
    sum sum array begin in
    let begin list
    let then let if then case sum let in let in case
    cons where end then then list list sum sum let if default
cons if then
{
    default if end end begin
}
then where if cons
    begin sum then
{
    list where prod let let case
}
    default end where sum cons sum prod cons list cons
{
    begin let default prod in in
}
list prod list if where sum let end
default default cons begin
    end sum let default let case sum where where array array begin
default list if let prod if sum in cons case
    if sum where sum begin
where begin list end default if default begin
where array prod
end in array let if
if if default if if if then end if end in if
sum then default begin array
    list end then let then if where prod
cons if cons array
{
    cons prod case let let case sum end end
}
default list array cons
then prod if case prod array begin end sum default
let sum where default in list case
{
    cons prod prod if sum cons case if list begin
}
    sum cons list end sum
    then prod case
    sum if default begin then cons
    prod if cons case case default then in case then
{
    end prod array end where end
}
if if begin let if in sum
if end default cons end list
list in list list prod let list prod in case
{
    let let end if
}
if begin list in if sum sum
    end let if case where let sum if begin
cons in where begin case cons then then prod array begin
    default in then in in in list sum begin case
{
    begin array end prod cons case where where then if begin cons
}
{
    let array then then in default list cons prod begin in default
}
    in where default default sum sum let begin then array
    where let case cons sum in if default let where end list
{
    where prod prod list where list
}
{
    sum cons sum where end prod list if sum array
}
let default begin prod prod sum end sum
prod default case then case end in sum
case array sum where case end default
begin case where then case then array prod where where if
list cons default case case let
{
    cons sum cons end default prod let prod let default
}
end in let list array let let
{
    then cons end cons
}
{
    list where prod default
}
{
    then begin where
}
{
    cons in sum sum array then
}
in sum prod end begin
    let prod sum sum if case cons let list let cons
    then array in end array end
{
    list default where
}
in cons default array let sum list list case
    if array then
default let sum
{
    cons array cons array sum in list end case sum
}
where list list list cons end
    in end list let default array case in if end
    list cons where cons let in array array array prod array
    sum then begin where end array cons where let where then
{
    then cons in default array where cons then let then cons in
}
{
    where in default default where then array then case begin sum prod
}
if where default end list array sum end then default
    then if list let sum case then end begin then
where if cons cons begin
begin begin cons let begin end
    sum sum case default where in
{
    sum where sum begin let where prod cons end array array
}
prod let array if in list prod case prod in then then
    then prod cons sum cons if in sum sum if where
    then sum in then list case in case prod where cons array
list then case then let
cons end default where if
    if end if array case prod prod default in end case case
    list where prod where
    in default cons case sum
    end begin in array then default begin
cons list end begin where
case let array then end array
    in let case then array array array array list
begin prod where begin case
    prod if let list
    where sum sum in cons prod prod then cons in begin
if in list cons cons then let case cons let end
{
    begin case sum end in prod let then
}
    in default prod sum prod array list
{
    prod begin where sum default prod list in list array
}
    default list cons sum prod default prod begin then case then
    list then begin array case let
{
    default let default default let sum default
}
end begin prod cons if default where begin begin case list default
{
    list default then end
}
    default let let where if case begin array begin
{
    list cons where prod prod in begin let begin case sum array
}
    where let let end cons prod prod begin end
{
    end let where let begin
}
{
    prod where list array
}
    in in then case in cons in
prod where list end then then
cons let end then
    prod default let list default case end then let begin sum
    prod let end if array then default prod prod default
    where list list default then cons where cons sum let let
case end array where
array end case if end in default end
    let sum array array list in default list default array where cons
    let array cons in begin in end array end then case list
case if sum cons array cons array
    where prod prod then sum if in let
{
    then list where case sum then in in list
}
{
    prod list where where
}
begin default in
{
    sum let where where where
}
    if sum then prod list where in
{
    let case then sum array prod array end in
}
in cons case let prod end default prod list let
    where begin list
{
    cons cons let case end begin
}
{
    sum list then case default then
}
    if where end array prod array
then in where prod then prod case default if case sum
    then if then sum cons begin in if then case where
    sum cons let
{
    list where default in cons end prod
}
{
    begin where array end where
}
{
    if cons case then
}
in sum in then if sum list default case end
array let then if cons sum case cons
let sum let case sum case end case
{
    default in end array default
}
{
    let then let case then end in list end if
}
{
    where cons let sum array
}
{
    default begin then end cons prod in begin case
}
    array prod default begin then default
list sum end then end cons prod array cons
{
    array in list end case
}
    array then begin default then if
    array default if prod default then then if end
{
    list default in sum begin array sum if end case end begin
}
array case if case sum let then cons where where
{
    end begin begin in prod where
}
{
    case then let prod cons in case sum begin begin let list
}
{
    default list prod if
}
{
    cons then then default in prod default begin array case end let
}
array in let where cons cons if
    if prod begin in sum
    if let array
{
    cons then begin then where where prod array prod then where
}
    list end end case array case let list array case default array
{
    where array then array cons array cons then let cons cons then
}
default list let begin in end cons where where default then
cons in end prod end
{
    in let where case cons list begin
}
    prod in list prod end case
{
    cons prod cons then where
}
    begin end if
{
    array where begin if cons
}
{
    if sum cons default sum in let
}
    then where case prod default in list list let
    end in prod where
{
    list where array default where where list case prod begin cons
}
let in prod sum where list array
    begin let case case end where
end cons if list where let sum cons where prod
array end then begin array end
prod begin if if list
    let let where let then default begin list let sum
    default then prod
    in end list then begin cons if prod then in let
begin list list case where case in end default case
{
    in in begin default end sum prod
}
    array cons in then sum prod sum in case
{
    then where default
}
where prod default in in begin
{
    if then prod default in if prod default in if
}
{
    if where list array default list end
}
    let in in cons prod case prod
array case in in if array sum
    let end case prod end then sum
    begin then in array if end where where
{
    where default then sum begin where let array sum
}
{
    default sum prod then default list then end then begin list
}
    default begin prod default then in prod in where
in where case array in if array prod
{
    if in end let
}
    let case in list in let if
list then default in if let if sum in
{
    case begin end prod begin then default let default
}
default end begin begin array if default default if default
prod array sum begin list then then sum prod default prod default
begin array then let where end then if where
    list case begin cons cons list then if
    let in list list end in if
cons sum then list end sum in default if begin list
    cons array case cons
    where in case in end in case if array end sum sum
{
    list default list end end list
}
where where array where default array where where end
case default array array prod
let array in where let prod end default
{
    if end begin default in
}
    default let let default let in if sum
    sum sum let
list end array end begin begin begin case
    begin where where then sum sum array array end let
    if prod then case then case then begin begin sum cons
{
    begin if in prod begin sum
}
    sum where end if array list list then list
{
    list sum in then end begin begin
}
    case sum then
prod begin in cons sum then array sum
end in prod sum in in case then array
prod begin then
sum array let
{
    begin sum prod let if sum cons list prod case case
}
{
    default default where
}
{
    cons begin list
}
    in list array if in array list begin sum then
    if in if let then list list end default prod
{
    if case prod cons in in cons sum case list
}
cons begin default list
{
    in let default then array cons then end let array end end
}
end list then
prod list end then case where if array let
{
    case case default end where sum list default case
}
end case end case begin case list
    list case end in begin default list then then
begin default if then then default list case begin list
if let let
{
    if begin list sum array prod list if
}
{
    case end end case then default array where if prod let
}
    begin sum default cons prod default then
    array then end prod list
{
    then let sum where
}
{
    if where if array prod
}
    cons list array if
end array end case then list prod where default
case sum where end cons array case in sum end where
where then end
    where list end
    then sum prod sum cons case
    then case default let if
default where array in in case where case in then then
    case list array then then sum list let begin end
    where prod where prod prod where begin then begin prod sum
    where array sum cons case in where
    begin in list if begin case
{
    let default array in prod in
}
{
    begin case default sum end let begin prod
}
    let let case array in where array default
sum sum sum list cons end end case list begin
{
    sum array if end cons case
}
in begin default begin then in
{
    default array array end where case list in end begin
}
{
    end in cons end default let case in
}
    if where begin where
{
    let in list
}
    if if cons cons end
end list let in sum cons begin
    list sum in default then sum
prod prod end let list end array let where end let
end list array end cons if let then case
if end array case cons begin array let list
{
    case in list end if if end array let sum in default
}
then list if case if in where default then prod end prod
    array then prod if case case begin then then
{
    if sum where default if default default sum then array array list
}
{
    default list list
}
{
    default list cons array
}
    where prod cons
    end case array let default array where where let where array
    if begin cons let then prod case list let
    begin in end let
{
    where let where let end prod default case begin array
}
{
    in array case end end sum begin case prod in sum begin
}
{
    end list begin then
}
sum array then prod case where where
let where list begin prod end
let default then let
{
    where if let begin default
}
{
    cons array case
}
{
    in prod where
}
{
    where prod begin if then if where cons end cons if prod
}
{
    begin prod if in prod then default in
}
prod then in cons default sum in list
sum cons prod begin cons cons where list
sum then case end then default end cons
case in default where begin let sum end array if
default then begin
    then if case list default in then
{
    where list case let end list begin array
}
then prod let sum
{
    list let where cons let begin
}
{
    in sum then let array
}
{
    if list then
}
    end end prod case array default sum array end then case
list where array cons end begin if where end default prod case
case cons in let array
    case prod end in
    if where sum case array cons cons
{
    default list cons case
}
    if default list cons
    sum sum cons end
    begin cons sum begin end case
array where array prod array where prod array then default
    if cons end cons in
{
    if list begin list
}
{
    prod where sum default
}
{
    in where default case then then
}
let if sum if
prod in where let array array list sum
prod end default in
    array default array end
case default let
{
    array sum sum then let case then default case in
}
    list where if default case default in sum case
    default begin default then cons
    where begin begin begin
if end prod
{
    begin sum if cons then let begin end prod default
}
    cons begin list where list begin
    in end cons cons list list if cons if
{
    begin end cons cons where sum
}
{
    case list default if where list prod list
}
    where cons prod if sum
end where let
let if where in let array if prod
array prod in in in in
    if default begin prod
    where if array in list in sum end array
    array then in list case
end cons let begin
{
    default array cons case
}
    let in where where if default cons let where cons cons
cons sum where let let
default cons prod in
    then then then
    cons case list prod default sum cons list if
    default end where prod list default
array cons default if case
{
    prod case in array list in in if let
}
    case let list default if where case if if cons let default
cons default where
    end list let begin case
in list array
default then sum
sum in sum
    end sum sum end case
case let default sum prod cons case case then then array
{
    cons case let default array list if let begin sum array
}
prod if sum prod let cons
{
    in default default end where begin where prod begin
}
    if in case cons array begin
    prod if sum let
{
    where in then sum where if
}
prod default cons if cons case sum begin sum in cons begin
{
    then in case array end sum
}
array array sum default begin let let
where in if let sum array in then where default if where
where end if begin if case begin default sum list
{
    in if then begin list where array end
}
    prod then then default end cons begin in if
{
    default let case sum cons prod
}
    sum where let in cons in let
{
    default prod if case
}
    where prod sum prod prod let cons sum
case list begin
{
    let case begin default cons list array then end
}
    end let case
in let array cons list in array where in let if
    then list case
{
    cons default list in begin list list if
}
{
    let prod begin
}
    then sum then if list
{
    cons if where end where prod then sum case then
}
{
    begin list prod where end default in array then default list begin
}
{
    cons let array prod list in
}
    let then where default sum then in default in
end sum let
    then sum prod prod
    case case prod end in where end where
    if then begin
{
    then case prod where in
}
let in sum sum list if prod list cons begin case
sum let end prod let
array begin prod end default default sum end case if case default
{
    let prod let default
}
{
    if sum then case
}
{
    begin array begin
}
{
    array case where case then default end
}
array if begin default cons cons then
    array in sum cons where if if sum end cons
then case if in list
    if begin end
array in list cons prod if array let begin in sum case
{
    if end sum then let array
}
{
    begin sum list end array prod
}
{
    if prod end list in prod in in let array sum begin
}
{
    sum array prod cons in list where
}
    array cons if in sum let sum cons let
array in in end let sum sum array begin sum cons default
    prod in list case array in let case
in begin default cons list list prod prod
    prod array where where list if end then list in prod array
if cons case list
begin list begin prod end cons where
{
    then default sum cons if list end where sum where then let
}
    let then let end if begin where let default case cons prod
where array in if cons sum if end array then begin
    prod array begin default cons case cons if sum
default let default default case if in array cons
{
    sum list list if default begin
}
    default if then sum case where list
prod prod default default
{
    begin where case cons prod begin case where then list where list
}
begin prod array in
{
    if end let then if case cons then prod array
}
{
    if list case array then end case
}
where default where if cons end where
    array cons array end default in prod in sum where then
    begin sum case list if list case sum if
array case prod prod
    end if let case prod cons array in prod default then
{
    cons then cons if sum default
}
    if begin list where list array cons in if array sum
{
    in where cons where array where in in begin prod
}
    end where let then end array default default default cons default if
begin cons then sum default end begin then then prod prod
    if case if sum
{
    then case prod in if list
}
{
    if let prod cons where if cons default list cons if
}
    cons where default in then cons sum in
default sum where if where sum list where sum
let let cons if in begin then then let
{
    begin array then
}
    begin sum end case
    if case prod default if where where end
    list sum list prod array if let then begin let where in
sum let default sum cons default begin begin case begin then default
{
    array array end let begin
}
{
    prod if then list case array
}
{
    end cons case end sum sum
}
    if if default end list prod where sum cons then case if
{
    cons default in let case default let sum default default let
}
    let array list cons sum case end prod prod in
{
    end array then default list then default default cons list then
}
cons list in where sum case let sum default end array
case array if then prod prod in in prod in
if if if then sum
    array then where
{
    end cons in cons let
}
then prod sum end in cons default sum then cons
    prod where cons
    let case if
{
    case if sum cons prod in let begin list let if
}
begin where let
{
    cons list end prod then prod list cons in case sum
}
end if list sum list array if in
cons array default begin in begin in let where then cons
if end array list list
    default cons list where default case default default
{
    end in let prod default default then sum default let case end
}
end cons array case end let where
sum prod sum where end let where end
sum in case where default
    prod prod let if in case begin
{
    default then then if array case end
}
where case then
    prod end list in cons
    list let prod if if
default sum default list
{
    cons end default then prod default sum sum begin
}
default case prod in sum end end sum
{
    list prod let end in in
}
list prod in sum sum end array in case where
case let prod sum default
list prod case then
    if where where then sum
sum end in in in let sum array begin
    list end if let begin cons then case array array cons
if array sum cons prod cons where where list end begin
{
    if if in array
}
    list begin let array if list array let begin where list if
{
    list where end cons sum
}
    case sum then array cons end let then begin
{
    let default cons
}
{
    cons let prod
}
    list if prod begin
{
    if in begin then sum let
}
{
    case array array where in cons cons
}
    array let if begin
then list list
    prod default sum let
{
    begin begin then prod prod let array
}
    begin begin begin
{
    where prod sum sum then begin where default begin end default
}
in let begin then sum if end then
    default sum in list end then
cons case end where
{
    where list array sum cons
}
list list list begin let end begin case case
{
    where let list then default prod let default in
}
{
    cons in where where array list
}
list case prod then in cons array sum where cons case list
prod let cons prod begin default if let default let
in begin cons case default begin where let if sum
let array sum cons let if case
    in begin end list
{
    case if end in cons
}
{
    cons sum if if
}
    if in if then case default case in sum prod array cons
{
    case if sum
}
    begin case prod cons where list prod array then list list then
    then sum if cons sum array array cons in if
{
    let then cons default array default begin in case case default prod
}
{
    if cons in end
}
{
    end cons where where list array
}
{
    in default default sum prod array
}
then where sum cons array prod begin array list
array list end list prod prod where list begin prod end if
default sum begin
case begin cons let
    end prod then then list let let case
    in prod let
{
    default cons sum
}
    list list prod sum let
{
    cons sum prod prod where
}
{
    where prod cons in begin end begin if prod
}
    if prod cons
in sum in then if if where prod if cons where
{
    where if in in
}
    case cons default
    prod list cons where sum end if begin list if list where
    sum prod cons
{
    if list end in begin if begin then in end
}
{
    case begin array default prod sum default case where list
}
if default where default list sum then if
where where list prod list prod in prod in sum array
    array default then where default array where
cons prod where if end in in default list where then
    list case sum if
{
    list then prod then then if cons then prod
}
    default begin begin in sum default prod end
    end sum begin cons case if
sum default list let then array prod
    then then then if begin then in in case let begin
    prod list then prod
{
    if where default array end
}
{
    cons sum let if case array if where
}
end prod cons prod default where then where if then list case
    begin where end end begin cons array then begin
{
    prod prod begin where then if where sum in
}
    then prod end let if prod sum
prod in default in if default
    cons prod let list where begin
{
    sum begin let default then begin let begin let cons let
}
{
    prod sum begin cons in in case if array
}
    prod default in end sum array then in
{
    then if in begin where let array prod where end if
}
array let cons in array where case cons sum in
{
    sum case array
}
    begin array end prod
array end array begin if let array cons
{
    array if case list
}
then cons where if let then prod end then then in where
{
    prod array begin end list if in if default sum default
}
    let if cons
{
    let end if case prod if array then end case
}
default array case let let in
{
    let end end in begin then cons
}
list if begin prod begin default
if if prod
{
    then then default let
}
case sum begin prod end begin prod array begin list
prod default where cons
{
    prod array begin sum default let if begin case let
}
    prod array array begin if default in
where array end list default if sum where prod default where
    list array then cons if prod list begin
    end if list list where where then
    array array let begin prod
    where cons array
cons cons cons case
    case where where case sum sum in begin cons
array end sum in array sum default sum end sum
    begin end let end in where where prod where cons cons array
list cons end prod
{
    array sum sum if sum list
}
cons in where default end default array
sum cons sum where then default begin if
{
    case cons let end cons let begin
}
begin then end in end case array where let end where array
{
    where sum then default prod end sum cons default begin
}
prod in case
    where where then
{
    prod default cons where cons cons sum begin if
}
{
    let list then if prod begin case in end cons then
}
    where end cons then begin let begin list cons where if sum
{
    prod begin begin array
}
if list list
prod then array begin array where array
in begin if then list then
let list begin where sum list sum where list in default
begin let cons array where case in in
    begin sum in sum in
let list array prod cons case array case sum sum case
end where prod sum if where let let
sum sum sum cons prod then cons where case cons prod cons
array prod end end sum cons list if
if where if then begin prod case end let sum let
    default default case where let where default case end where then case
cons prod if then default prod if prod end where
{
    let then cons
}
    default then in begin array
{
    end end in default case end cons array array let if let
}
let in let in array case then let list array begin
cons then if case then then then case begin prod case where
    then if let where begin
{
    default case then
}
{
    sum where let cons in end default if then
}
    sum in let in prod
array end prod array cons cons end
{
    cons if sum list
}
{
    if where prod let cons prod
}
    end cons if then
list if array list then array where
    in prod sum then sum cons cons begin if let where
{
    begin in let default in let prod end if
}
{
    if sum list begin list in then case case
}
then list let if where case
    default begin if where end let prod end list if
if list prod cons let then prod in in
sum then default
{
    then if case end where default if
}
sum prod in array then prod list begin where default sum let
{
    in case sum case end
}
{
    end list cons then where end case case
}
list end where sum prod then sum in sum cons prod let
{
    array then end begin if sum then where begin in
}
    list let list let begin in case
prod prod end case
    sum list list case in then begin array default cons in
{
    sum if let list if cons in let begin sum
}
then then cons where cons prod prod array
{
    end sum prod sum prod then sum
}
end where then
{
    begin where if sum
}
if default if begin in if default end in begin let end
    cons in where list end then case
    prod cons default cons end
    then let in array list sum in cons let end list case
{
    default prod array
}
array in prod array then where
{
    begin prod cons begin where
}
{
    case if default array cons then in
}
{
    default then begin end array prod
}
{
    in array prod sum
}
    let if where array if array if prod case let let then
{
    array list array list in case default begin begin let
}
{
    cons list then prod let
}
{
    default where sum in array sum list
}
prod prod begin in if prod begin list let where
{
    where sum then prod in default in default default
}
case sum if if in case let sum cons sum default
where let then begin default if if cons begin case
{
    sum sum in where cons then prod in sum case
}
array where if cons case end sum array
    where list sum then prod let where sum case
{
    default if default
}
{
    in if prod default prod let
}
    case where end end end begin then default case sum case cons
sum cons end let in cons sum let then default end
    array then sum list array
array array in list cons let list cons sum
{
    in begin sum let sum then default then array where
}
let default sum array array default array list default in
    then in let in sum case let list array sum
cons let list
{
    begin in then then in
}
    cons where case
    begin begin begin where default case then where default prod
case prod cons case cons end list case
if prod then array cons
{
    in let where default sum prod then begin in sum then
}
    list sum array where array array where
prod case cons then cons if case default in list let cons
    in prod then array case cons case where in
if array prod array
    let in array
{
    cons let array case
}
begin end begin end
{
    in begin then
}
end case case if
    end let case where where let list list cons sum where begin
    list sum where
if sum then array cons
{
    default array then list in array then in
}
    then where if then sum where where in then prod
in prod let prod where
case case default list list case then
sum array prod where prod let end where end end end list
    prod prod where array prod let sum end let in list end
    array where default list end begin list begin prod cons
{
    then begin in in case case
}
list end cons list where
{
    if prod default end let in if sum prod
}
case sum where prod then cons sum sum list list default
array prod cons where case then
    where prod case list prod default let
    sum in then default array where default where then
prod end case cons where
if default prod default where case list let
    begin let prod then list
{
    array cons in end if cons
}
array cons list sum if
{
    let begin prod let end where list prod let default sum array
}
{
    in cons list array
}
{
    begin default end if then in
}
begin then cons let end sum then array end sum cons begin
    where where array if sum default
{
    cons prod sum default cons default where default sum
}
default prod in sum default
array let begin
    cons sum list
{
    list then in end
}
cons array list prod case begin end in
array where end end
    if default sum begin let sum default
{
    begin default array array sum case case prod let prod case
}
{
    case where where case then prod
}
{
    prod cons array prod cons in begin in list
}
    list default end sum
let sum prod end cons case default
end then end in cons list then then
cons list cons then begin where if in case case default let
    then then prod if let let let
{
    let array in let prod if
}
    begin begin prod let case let default in begin case
{
    in begin in
}
where array prod then cons case array end end
{
    let end then case where then list cons if cons where
}
    if sum prod prod if if case sum default if where
then in let in sum if prod end if list where
{
    default in in in array in sum default let
}
    list list end end
    case sum in sum cons
begin in prod in then begin list list array case list
{
    where let where if in begin list sum
}
    if list begin sum end where default begin if then where end
array where cons begin where end cons default if default sum default
{
    prod then list
}
{
    let let let in
}
    array prod begin in sum case prod if
then let list sum then begin cons begin then where
default case list let let begin cons array case
sum begin then array cons case prod in if
    cons where then
begin sum if sum sum if list then list sum default
    where list then prod
    in if list sum end then where array sum
    cons begin default if case begin if
sum if sum cons sum sum case let end sum
    case then let then array begin if in prod end in prod
in end in in begin case prod end where list array
{
    if let if default
}
in prod where end let where sum end begin where
array case sum array let if array list sum array default cons
{
    where in end where array let
}
    end begin case end default array list array sum case case array
    default let where in end let
{
    prod in then list cons
}
    cons where where case case in prod sum
prod array sum begin
{
    if if end case
}
cons begin default case in in default
    let sum case where then cons let cons where prod
{
    prod let in cons let
}
    then default list if default end
list case default if sum if begin cons end sum end
    sum let where sum prod array where prod end
{
    case end prod where where
}
{
    cons begin if if let in if list prod let
}
let sum prod if end sum cons cons in array if
    case prod begin cons cons in
{
    list in where in sum end list list
}
    let if default list then prod
array where begin list cons
    then end if then
    then end list if let default sum cons end if cons
sum list default begin cons cons then
    where where sum case sum case begin then prod sum begin
{
    then sum prod
}
{
    where end let end
}
in sum end array sum cons default default if if list
{
    then where sum prod in prod then then
}
sum in default let
    sum prod list case if default where end then in
if list case array where let where begin begin
{
    default array default list begin cons array begin
}
    in array cons prod in sum in let default array then
{
    where array begin default prod if prod in
}
{
    list list prod in sum
}
    cons sum prod
case end if sum
{
    list array sum prod sum array
}
    where array cons array cons array begin then cons array then default
prod in end end array end end cons in let
if where begin end case begin where where in where list
{
    let list array
}
list end sum
{
    cons where then
}
    in where case default
case default list then where
in if array where in in default array list
{
    default list list
}
    cons in default in sum cons list end default list array
{
    array list list array list begin
}
    let let list
    where prod sum default case
    then in in prod
{
    if begin list list case cons let begin
}
in case case end let then list in let default array
sum sum begin in let then let
    default if array where cons
{
    sum array end sum let
}
let where end cons in then where
    then if let prod where where let where default
    default if sum case cons let then
{
    prod case case if array if sum sum default where cons begin
}
{
    begin sum where in list sum begin default let
}
    default let cons prod default list sum default sum
    sum end case where array
{
    sum begin then let then end in let then
}
case end begin cons case prod
array let where begin case case prod if if default default sum
    sum default if if default array prod begin default
    case if in if
    if then list where list let begin let array
if sum begin default cons list begin
if end let end then prod cons
begin cons list array prod array array then begin let case then
    prod prod where
    then array begin let in array if
end prod in if in
{
    list prod let let let sum list cons where list default then
}
{
    let default if in let begin in then array sum begin
}
    then cons list cons case default cons end case
{
    end let in list end cons let cons
}
{
    let cons case cons end end
}
    begin if array cons sum begin
    case where then cons sum
case prod then prod prod end let then prod
prod where then where in case end let let then if in
default sum let cons where begin then array prod default
{
    prod where in then where end default array case then
}
cons array where default if prod in list end
    in prod default begin default list in in array
    then where begin end
prod case where if if cons cons list array
    begin in then begin if let default list array if begin sum
cons let if if default if case if sum
prod let if
{
    array where if prod list prod let array sum
}
    list begin default array
    then case case if sum
    begin begin array list then sum in list if then prod
    in array array then
{
    let list if then end then in cons array default in
}
list end where default prod sum case cons let list array
{
    where list where then prod default begin end begin let
}
    case begin prod sum prod if cons end list
case list where let prod list array sum let case then
then where end cons cons array
{
    list begin cons end prod in prod array where then
}
cons cons array
    if in begin list if sum end prod if begin
cons array case list list where end prod where array
sum list in default where default where
    if default then in in where let end array default case case
    sum cons prod where let case then begin default sum if
{
    list in where array default default if prod
}
    end end where case sum let case prod
then array if in begin in case cons prod in let where
then end case
where in where default then list default let case let default end
let case let let default begin let end where cons then list
{
    case let list then list then
}
{
    if prod prod case array
}
{
    array case where default if cons then where then in list then
}
{
    list array sum begin default where cons
}
{
    where where list sum in
}
    array end then default list list in prod let
sum begin cons sum list case array
{
    prod end then sum begin
}
    let let where case
{
    default in prod cons then end
}
{
    array in sum end default in default cons if
}
cons in end case cons then case
    let sum then in prod case
then in cons default default then prod list let begin list case
end then cons array then default list
    list in case where then let sum
{
    then then prod where sum case prod where case let
}
{
    sum default prod let if begin
}
{
    if if cons let case if begin sum in
}
{
    if begin end where begin begin then
}
    where if case where let let
{
    array default array where where prod sum begin sum cons
}
    prod if begin end if default
sum case case list let if end let let sum sum
{
    sum end then in array default prod let list list sum if
}
cons let sum
    let sum end list cons begin end
{
    list array if array let where in case end in
}
    case begin if end cons then cons prod
{
    default default where then prod
}
{
    array where default
}
list sum begin cons list case case
{
    case then default prod prod default in if cons cons sum
}
    let in array prod begin let case
    end case if then default let default case end list list list
{
    list prod list begin sum list cons in
}
    prod where then default
    array end end cons list
{
    list case begin array list end let sum default
}
prod default begin prod prod in prod array
    if sum then let prod prod let in
    list list let sum if in prod in
{
    if begin case let then
}
sum let let then where array in end begin end
{
    default end let
}
{
    in end where then list sum list default list if list list
}
array then default where in let default then
{
    array case prod where if list
}
let if prod if begin sum list begin
    default where default begin where case then
{
    begin begin case sum begin where then prod cons begin then prod
}
{
    case end array if begin
}
{
    then in then in array
}
    then case then case prod let in array then
let array array sum cons end if then where
if list list let
{
    array array if if sum array default array
}
    where list sum if default case in case case array
default in end begin list begin array in array end
default in let list list begin prod where
{
    sum end list let list case default list let
}
{
    let if where array begin
}
{
    end default array in array then array cons
}
    end sum cons sum prod list begin case end cons
default then let begin default case array default
    array prod if begin list let default end cons default case
{
    begin if sum cons
}
{
    end array let end sum cons
}
{
    default let default end
}
{
    prod list sum sum prod list case default where
}
cons then let if then
list default in begin list let array then
    then cons array list end
    if in array default cons array in
{
    list sum sum in cons default prod
}
list sum array where sum let list if begin
{
    let begin case array list array case if
}
{
    begin cons end begin list
}
{
    default cons if sum prod list
}
    where then begin in array
let prod where
prod array if case then then then
in array end cons cons list if case
    default case sum array then
where default if if end list begin
array then case then case begin in begin array begin array array
{
    prod where case let sum array in list prod end list
}
{
    let if begin list case where array array array
}
{
    where list where array end list in where
}
{
    in list then prod sum
}
    if let array begin
{
    array where let
}
begin then where if in cons let list then
{
    if prod end if let prod where default
}
then in begin end default in prod
default array where in cons then where list prod list let let
case let array in list array end list then
    case prod list if sum then
{
    array if prod prod case let then case where where
}
{
    end where list case in end begin case then begin end
}
list list where cons array list cons sum sum
{
    end end begin end if where where sum
}
let let in list begin then array in where cons list
{
    begin in begin prod begin default
}
    end array list if default then case list where where
list sum then list prod sum let where end where array
array if sum prod begin where let sum sum prod cons
{
    where list default then cons sum
}
{
    sum let default end
}
if prod sum then let where end prod list begin sum sum
prod default array prod then cons where in
{
    where begin default
}
begin case default in where
    sum default default where end where case begin case begin default
{
    then array cons in
}
    prod begin let cons sum case
    array then list begin sum sum end where
    list array if if case cons cons end cons list
{
    then where default list in
}
    case in let then cons array end then if let case if
    begin if where
    default end array then cons end if sum array begin end end
    array where case default where let if default
{
    let default then prod cons default then prod cons prod where
}
end if end begin list then
begin then where end begin
    sum let let default
{
    end end where in where
}
    default in if
end sum sum begin list let list
list let begin array array cons
prod case then case list
cons let where
    list case let where list then
    array cons array if default default where prod
then array where default default list case where cons array end
    then begin cons
    end in list begin end sum array case let sum where
{
    array if begin array list cons in begin case case let
}
cons cons begin array if
{
    if let begin end case prod list prod case begin
}
then in sum case case case
where begin where then prod if begin prod prod prod
in array prod list sum default end let default begin sum prod
    sum begin end prod where in prod begin in sum let list
{
    cons where if in prod then
}
{
    where if let prod
}
    list if sum case then default case case prod list
{
    default if if begin then where array in case where in
}
if then let prod
case array where case in end if prod where
then end in let array case cons case
{
    case default list list sum
}
{
    case cons list then case in sum prod in let cons if
}
list then end
end case array default end begin default then prod case prod
    array array list cons prod prod in begin where then
where prod cons list list let prod sum case
then begin list then list then then default in let
array let if let
    begin where case list begin list end cons array then array array
    let case begin default in prod if default let
{
    default sum prod
}
{
    sum if prod let cons sum prod default
}
if prod prod case
{
    array default sum default begin
}
in array sum default let begin
    sum end in case default end
end let where then in case list sum then begin
{
    cons then array case begin prod let case sum sum where
}
in sum sum in in case where array list
{
    in array list in
}
if in prod if
let let in list if let prod begin default
array default where then if prod sum
{
    where sum if let then begin default prod default prod list
}
{
    sum prod if cons let list where cons begin array let
}
    array begin prod if if list let let prod end where case
{
    in end prod sum where let
}
    sum sum cons prod if in sum begin
    prod where list case in prod if if prod sum end end
{
    list if let begin default where case end end list
}
{
    prod list prod prod
}
    default begin prod case case end
    if list end then in then array case begin sum case case
then case if prod sum if case then list
{
    where then end end default let if
}
    default list where where default list prod sum prod end list
{
    begin where if
}
    case end case prod default array then case begin cons sum
where default prod then array
{
    then cons sum end sum list prod then cons
}
{
    case cons begin case prod default in cons
}
    case array let end
    let cons default case end in array then sum sum let let
let begin cons default sum prod cons where case let
{
    begin case let cons list end default where let
}
case where case end
{
    if let list if case prod
}
prod end prod case end prod prod list default
    cons if sum then
{
    end if default default default cons begin where default sum array
}
    where default prod array in sum where case list in begin
default case end where end begin prod
    list case where then list sum begin cons cons list
{
    begin if where then in
}
    where cons case
begin default then let if case sum cons let
sum cons begin let
    then default cons list sum where
{
    array in in let sum cons in begin array if
}
    begin default end in cons begin begin if cons begin
    case in begin
sum in cons
    default list if list in begin end array list let default
{
    begin let begin end if prod
}
{
    in cons let where
}
    cons default in default default case begin where begin
{
    array default sum default in default case prod cons
}
{
    where array cons list where cons default
}
cons where list if if begin
{
    let begin list then case
}
    default prod if cons in if then cons begin cons
{
    cons cons prod then if begin prod then where default
}
let end sum if if begin end where let list cons where
{
    in end end cons cons in end prod begin
}
case array prod let in default prod
    begin if where begin sum array array sum in where
    in if cons list array list in default end
{
    then case array sum then case array if default
}
{
    begin then if cons array prod list
}
list let array cons let default
array sum in sum begin case sum where case array cons
cons cons cons default list
begin then let default case prod prod sum
{
    if default prod default end prod end
}
where sum case list end if begin let list list
{
    array array array list end default case then then in
}
then default default prod end cons list cons end if default
    in then where in in case
    begin begin let cons list prod if list
{
    let where then in list cons then
}
    end where if then
then cons list default
if begin let
    in let then list where sum begin begin
{
    list case let case
}
    prod cons let prod then let default default end then if array
{
    prod where then array if array array end
}
    list if sum array sum list sum list where array
array list then end sum
default array then let then list case prod end default
{
    in end if let begin prod prod cons list if case
}
    if end cons array default then let where default
{
    prod where array in end
}
    sum list end
cons end list cons cons case prod list if let end
{
    in begin prod then
}
{
    begin default list where default prod if default end let
}
let begin case in list if if end array default begin let
{
    let then case if
}
    array end where array prod where sum then then end cons cons
begin case in if begin
    end default begin sum where begin in
end default prod end case let where then array
{
    if case then array cons end sum
}
list case end let default in if if if prod
{
    end let then array where prod
}
{
    if end then where end list default sum list list prod prod
}
    array begin then array end then if default let sum let case
let if in end if array begin
default list then begin end list case begin
    list list end let end
    end array case where
{
    in cons where let then prod prod list if end where array
}
let case where if list begin let cons in where prod
    array default let then begin array list end in
in case default let end then
array default default array list if list let end
{
    prod sum list where where case begin begin let if list default
}
{
    where in case sum
}
default if begin then default where list default list
    prod prod if prod if prod array let list
default begin if default
cons cons array case sum if if case
array array let cons list
    if where array prod case if cons let then let cons let
prod case if case sum then cons sum then
if cons default list cons end let default
    array let in where in in end if list
    cons prod in
{
    if prod if then case sum
}
{
    begin let prod where case case in array where begin if
}
{
    then prod begin case let prod where case then end
}
    end list array cons prod where then end sum array
{
    then case case where array begin end
}
    begin cons if case array in
{
    list end in let begin end in
}
{
    array begin prod sum sum end sum then where prod
}
array end if end
    sum array in if let default case prod default then array
prod prod sum then default begin
    if sum in end in begin
array prod then
{
    end cons sum sum array in list prod prod prod where
}
{
    begin sum then then default sum
}
{
    default let end begin end cons prod default prod where sum if
}
    list in sum sum in end
    list case let list in case sum case cons
default array array
default array default
{
    default where case array then list
}
sum where array let prod prod case let prod default where begin
{
    default array in let end case cons case end array
}
sum in prod end sum cons begin list begin
prod then if prod then begin where
if end case
begin in let case begin where
array list array list
default let prod
    if array default case end list array
{
    in case case in
}
    default list begin cons
    cons begin if sum where in
    where array let array sum prod
    prod sum default
{
    sum array in list prod in default begin
}
{
    list list default if let sum begin end case cons begin
}
{
    where default if where in prod if let
}
begin prod prod cons prod case if
list default cons list in list default list
{
    let end end if where begin array list array if case case
}
    array default then if case prod end
then prod cons in case cons cons
    prod array begin sum prod
where array case where
{
    then list cons array sum if prod begin case let
}
{
    where cons begin where
}
{
    then if let default in in list
}
    in default where array cons let case
    default end then begin let array then default where prod
    cons array default sum default let end if
    array case default where let if then
{
    cons in case case
}
{
    let prod if begin begin prod array case where
}
end cons prod cons in where then if if
    in default sum
then begin sum default sum
{
    case case let then end
}
sum prod prod cons begin cons begin
{
    where end case array where let cons in let array end
}
    let list where array prod begin begin default array cons case default
case if then default where prod prod prod
    let prod default list
    case default then default if in then
{
    list cons end where list begin
}
array case end where cons let cons sum
    if then then then end where then
{
    cons prod array end end where let let sum end case
}
sum prod begin let begin in in begin let
{
    in in list begin list cons
}
{
    prod cons list sum in where prod default
}
{
    let array prod sum cons array case let then then let
}
then prod let prod
{
    begin begin prod case let end end let end cons array
}
{
    then begin let cons list list sum begin then prod
}
begin prod end array default if default begin then
cons end then list prod begin list in case
case array default sum case let cons list cons end case
begin cons end cons if prod in then
in begin where where where if in case then in case where
sum begin end let default end default array default
{
    begin case in prod array in begin let default if
}
list list where case then
default prod cons
{
    prod then let prod prod cons cons in sum array case
}
{
    case prod let if end prod in list default begin
}
{
    if end list
}
    then begin in array cons
    cons array array list array list where where let in cons in
    default list then cons case end list
{
    end list let list if where sum
}
begin array prod prod end end prod list then end case array
in where let array end then
    then in cons end let where sum
{
    begin in default
}
{
    where list where cons let if cons prod end
}
    then let in end end
end if list cons let
{
    then if begin end end then default end
}
let if let
{
    prod case then
}
cons default list where in where let
    in prod in where list sum case
{
    list in sum then case end let
}
{
    array let prod
}
    then default list array
{
    let case where default cons sum if prod cons
}
    default array if prod then array sum sum begin
sum if list array in end case case
sum list default begin begin let default begin begin
{
    case begin if let sum
}
{
    list if in sum prod array case then array
}
cons sum begin default cons
    cons end prod cons then cons list cons array default if then
{
    prod cons list then
}
    case array begin in default case end
end sum in cons let case then prod in sum default
begin default in list end
{
    prod cons case
}
{
    where let end in default in in prod
}
list cons end end begin if array end let
    case array sum case
    prod array sum in end prod begin then
list in end list if prod if then array
{
    case default let default
}
{
    prod then in sum where
}
    let case list where where default prod cons list list end
    prod list in where begin if list where
{
    array list in where case if case sum array
}
    if let let let if sum list let in where
{
    case if prod
}
    if list list sum list then in default case array
{
    in if prod let begin
}
    then sum end array in where then default array default in
    let array let default array
    end default sum
{
    default case end cons case where
}
    array if if list cons
let in then where
{
    default prod begin if
}
case where begin where in then if let list cons case cons
{
    default where if end
}
{
    case end default
}
if array let
{
    array begin cons case end prod
}
    begin in end end default where where begin where let default if
let in default cons begin let in cons where
{
    then end array cons
}
    if list default then in then
{
    begin in array in cons
}
    array in if default default default sum where array
{
    if sum if sum list if array then cons
}
{
    cons in list prod list cons prod end array
}
    array sum begin
    prod in end if prod in where in sum prod array end
{
    then cons sum prod prod
}
let case begin array begin cons in
    case let prod prod case list
    in if where let list if list begin
    sum let end prod prod
case cons case array end in case then begin begin default case
    sum begin end then sum list if
    array sum where array case end cons in
list sum in
{
    where begin in cons
}
    then array prod default array list sum
    let let end list
    in end where if cons let array begin end
    in sum sum sum default where cons then where default then in
    end prod sum list in list cons
{
    default list case default prod case
}
{
    default list then where if where
}
{
    let let cons in let case prod case let if let prod
}
{
    where end then end end sum where cons end then
}
in case where list begin let cons case
{
    end begin sum cons end list cons default list cons list
}
    where begin default array where let cons end in cons if array
    prod then list default prod begin case list in
array then list
begin sum list then let if begin let case
    in where array sum begin prod if list default case begin then
default begin sum default array in cons sum default array if
{
    case let list default
}
prod if where prod list list list cons
{
    begin if list end let prod end cons sum default if
}
{
    list let prod array array array where let
}
if in list cons default cons where let then cons let array
    end begin cons list default
    in prod default sum cons case cons list list then end begin
{
    default sum case in default
}
in end case where prod list begin let begin default prod
{
    default let sum case let end case
}
    where prod in where begin prod prod
where case sum list
array sum if where list list where end
then list prod end in default cons where then prod let
if list sum case in prod default if sum where
    let let in default prod then begin
    begin in cons default where default prod array
    where then let in array prod sum cons then begin
sum cons end end let if default cons sum in begin cons
    default array where array sum end end then
{
    begin sum if prod cons begin cons let array array
}
{
    cons begin case default array default begin
}
{
    default where array
}
{
    sum let prod
}
{
    default sum sum
}
{
    where default if
}
begin sum sum array in sum then where where
    in begin begin
{
    sum sum cons cons prod default default then end where sum if
}
{
    then cons begin if then then begin
}
let array begin
    case begin begin if prod let list begin
    sum case then if sum
{
    prod begin if then begin default sum
}
    default case array in begin prod if
    where let list case if sum if sum begin then let sum
then in default default sum
{
    case then if cons in let
}
{
    array then let let then array prod default array end
}
list list end if prod cons let
{
    in begin where list if
}
{
    let sum end array
}
in let prod begin cons where case
{
    array cons list in in then default end
}
    array let begin array
    array list in begin end begin then default sum let
    let case in prod in if
    end begin cons list then let
    end if list
{
    begin in case where then array sum let begin default array
}
in then case list in begin
    end case cons then cons cons list array prod if if sum
{
    array default prod begin end end prod
}
{
    in list case prod
}
    sum begin list case then
{
    where let end begin where if
}
in default begin end let in
    default begin sum if list cons array sum prod cons
{
    prod begin cons
}
    array sum list sum where default let in
{
    prod default end
}
{
    in in where prod
}
{
    begin where in case in sum end end if cons begin
}
    if then list prod case
    let sum then default in then sum list where prod prod
cons end prod default list case begin cons where case begin in
sum if if sum end sum where where prod cons
prod then list
    in begin where cons
    end let end then list let prod let where
case end list sum if prod then end list
{
    case in array in
}
in if list in array in end begin prod begin
let sum begin default where begin
    prod cons in if then sum prod
    begin where prod where in case default in
if case if end where
    case case list case
end cons cons where where sum case
    where default default array begin end cons default begin
case array default case let array end in then if
    cons sum let begin sum where begin let
    prod if prod let let default case prod then begin sum then
cons end cons list case sum
{
    case case list
}
{
    cons prod where case if case case sum cons if cons sum
}
    prod array then array if where sum in where in begin
{
    cons begin begin default then end array list array if end array
}
{
    then array then cons then in array list end
}
{
    sum end then begin end sum in cons let
}
{
    end let begin in
}
    list begin list cons sum list
if array then sum list where let array sum in end end
    prod cons prod if list end where then end
where cons prod
{
    cons begin where default cons in cons array array end prod
}
{
    list prod list prod where where list if
}
where let where cons let in sum if
    let begin array cons sum begin if default
begin then cons in array array in begin begin
    then begin end sum array case sum
    default end let default prod in array begin where
prod sum begin
    begin let then cons if prod begin if case then where if
    case in sum prod where list array end case if case default
{
    where in in prod array prod let in where array end
}
then sum end cons sum then case end
{
    prod then begin end in begin where where sum
}
    default list then in begin begin
{
    default list list
}
    begin where begin list array begin default if begin array case cons
end prod in case list array array
    list if prod let array array case list let let
    begin prod begin begin if let sum in
    then end begin
    begin list sum cons cons where in sum end
    end case list list sum if prod array cons
{
    if list if sum list where sum cons prod list
}
begin where default sum begin
default list array
if list let
then list begin end case begin prod sum in
case case then case end array if where case if where where
case in end cons cons then end
{
    if cons case let default then then then if
}
    where array list let let prod array if
{
    default default list in if list default in begin sum then
}
    sum sum case end begin if if prod
    where default in prod end cons
    end where list
{
    list if list
}
    prod prod cons
    default where let array case
    prod cons then where then default where
    case end sum default then sum
    let prod sum let then end
{
    end sum end if then
}
    array begin in cons sum prod in
    cons let case end array cons array if let
    prod end then sum begin default
{
    if cons where then where where then begin where prod end
}
cons case cons default array end where default where prod default begin
    if array if where let let begin default if cons prod then
    in in then sum cons prod if array list
    prod list end prod let default
{
    begin begin then end prod case end let cons then
}
    sum end array cons sum
default begin let begin sum prod
{
    where cons if where end then end begin end case let cons
}
    array case if end default end prod cons begin in cons
    cons begin sum end if in begin where begin
    default then default sum case array array let case then list list
{
    prod where cons begin cons array
}
    begin case where where then list default let
if array in then
    then default end end then prod in where where sum
let if prod begin if case default sum prod
    list begin let case end then sum where array if
    begin begin case where cons array cons begin case
    array array sum in end
    where let default if default prod end case cons
in begin case begin default in if array let
list default end in in let end array case
begin where cons if then if then sum default cons default default
{
    where in list array cons array sum prod in then where
}
    begin case default
    then begin where begin prod default end begin default list case
{
    where array sum end
}
list array cons where prod let then then
default case case
cons if default case then in
{
    sum array let begin default let where let let begin
}
case case default prod where list sum if
let if in list end case
{
    end cons if case then in list array prod
}
array case if cons prod begin where where array sum
prod let default case in
in default prod cons sum in in sum end default sum
    where list where
list then let in case
    case list let default
{
    end cons in cons case cons if let end if case
}
let list cons end cons in if if then
{
    array where cons array array where
}
case in list if end in begin end begin where in end
{
    begin where if in in
}
    where if then sum if cons sum cons if
list list array let sum cons in
cons array in begin end if list let
{
    let sum sum then default default
}
{
    in if where prod where end in list default if
}
{
    default case in default then then then sum end array then
}
    then where then begin prod where case case in list
sum let where cons prod then default if let array in begin
    end array end sum sum end cons list if
{
    if list prod
}
    case array prod cons case case sum prod end
{
    where let end list list list
}
cons if where
then if begin end let list array
    then cons where where
    if in array let end begin default if cons
    let case list default list begin if in then array default case
then where end if let in where
where list cons sum prod where
{
    array list cons cons list case array
}
begin cons array
    sum cons list end sum then array if
array array in sum in if begin where begin begin begin if
{
    sum default begin begin if default
}
{
    sum case end prod where case if default let let in
}
case list if
array where sum in sum end where list prod case begin
{
    sum where in where default end
}
{
    list in in sum cons
}
{
    cons case sum if where list let list
}
{
    sum in if begin array array begin begin let let prod
}
in if then array sum
if list cons
where array where default case case begin then in
    in where in sum case case case then default array end
{
    array in cons case cons list begin in default prod array cons
}
    if begin if list begin if in in default
{
    where case prod
}
end begin let sum case begin
    prod default begin default end in then cons
    end cons cons
{
    sum in end list then
}
{
    in if let case case begin end prod list in end then
}
    prod end array begin let where if then prod
default cons let if where list where default default prod if
    where sum where sum
cons array list
{
    where if list case case list
}
    end begin default default let case then end begin cons
    sum if if sum default end list cons list default if
let in case begin then begin array
{
    end begin sum if
}
array in then cons in default where begin default list default cons
prod then where case if end let if prod begin default prod
    prod case cons default where default if begin where prod then end
    default if begin array
{
    list prod then list where cons list case where
}
{
    begin in prod case array begin sum cons let in
}
    begin end case where default then array end
    if array default
cons array where begin sum begin cons
{
    sum array default sum list sum then end if prod sum end
}
end then case cons list array list default let
if default list prod where cons begin case end
let end sum where default where if begin default let begin list
    begin if end
sum array if default end cons cons
prod cons if in end list let cons default
    begin where prod array then sum default array where end case where
{
    let begin cons begin then
}
    in in where then
{
    prod default sum then then
}
    list where array let if
if if case prod list let cons list then list end case
    list then end list default in in list end prod end
    if list cons then list prod cons where case
{
    case in list in end
}
{
    if case end
}
    cons array prod
    then begin in end list if array sum cons default
{
    if in case list default
}
{
    sum begin default default begin if where array if then begin prod
}
    then case prod where cons begin let
begin list in sum in list
begin let default default list in prod cons
{
    end if prod end end in let begin case end case then
}
    then where if cons in
{
    prod list in case let end array
}
    array case case end case if array
in cons cons case then
{
    if array in begin cons end prod begin default in
}
    then end list case prod list cons prod array begin array
{
    let case prod array cons
}
in where then in end list end
where cons list begin default
case prod case where default then where sum
{
    where begin then let
}
{
    prod then sum in if begin array end
}
prod list where in prod array prod default end if begin let
let sum begin list if if let then case cons cons end
    array list cons list where in
    begin in where prod
{
    array let in list prod
}
in sum if array in if end
case if then
{
    begin begin array
}
{
    case begin let prod array begin
}
    then if array then list let sum list in then
default case in prod sum then array where
    let case case begin let begin if case case sum let list
in where let if then cons let
    list let array cons default
    begin let array if
    let case prod array sum let then prod array
{
    then prod if if default sum sum if
}
    begin sum end list
    list then let default
    list sum cons
    begin end default then where list if sum let array
{
    default sum array array end in list end then
}
case let then
    then end list where begin cons let
{
    prod where begin end array prod prod
}
sum end begin list default
{
    let case then where begin sum
}
    default array array begin list default then list in
{
    end then let begin then cons let default in end where end
}
    prod where case end where case begin then
{
    case begin begin end
}
{
    cons sum where where
}
let end end let case begin
sum begin if list if array let array let default where
cons cons list case in where default array
    then cons prod prod end array begin
{
    sum if array array case in array array case default array
}
case list list array let if sum end case sum end
end prod default begin let list cons
    end then if
{
    array case list
}
end begin cons default let end array begin default cons where
cons sum let in let
    array default where default begin case in begin default if
    case list array cons list default list list case cons prod list
{
    where where default sum default
}
{
    cons end array prod if end where prod begin cons prod prod
}
    prod sum begin let begin if let default cons sum cons
default where cons end prod list begin cons array where
default if then in begin end
begin array let cons
    in list list if then cons case array then in array
    where case let
{
    begin then case let prod prod end end in sum sum
}
where array list let sum if begin begin
    begin where end prod cons let if begin end in cons
    begin list case
    array end then where begin let
    default let default array
    cons where in begin list
prod where cons if
{
    sum end end prod where array case where array
}
    if if end default array sum end cons let sum
    prod where sum end list cons array
    begin case where sum prod if sum let sum
{
    then array where if array where if array
}
{
    if let in
}
in if begin begin in let
sum end where begin case list where case then
list where list
case sum list end list let sum
{
    if case then default let in
}
{
    prod begin if cons
}
default sum default begin case sum
end case where let default list case where if
then list sum if in sum
default then in begin prod in
{
    sum let begin default end case let
}
{
    sum sum cons where where
}
cons sum end begin begin then in let
end end end begin in where case begin if sum
    in then default cons
{
    prod begin in case prod let where
}
case sum end prod begin sum array case begin
if cons sum prod
    if cons list case sum prod sum
    prod sum if then array list cons case sum list default begin
{
    prod array where list
}
then where where begin then then case case cons array case
{
    begin default array array let let list list where
}
list prod cons in default begin
{
    if begin in sum
}
    cons cons sum prod in begin end
default case cons where begin then list begin if
let array default
{
    array if where default if let case case prod
}
    let begin then begin if in if where let in
in sum array let sum sum
array in sum if then sum if cons
prod in prod prod let default prod then
    if cons list in default list default let
    end default begin
    array in then then prod prod
case if case list if where sum list end cons
    prod then begin then where sum cons if array default
{
    case if case end prod let in cons array
}
    list sum end case where default
prod cons sum where prod if default prod cons
{
    default cons case case cons prod prod if
}
    array list if in
    begin list cons sum where array case if let case
in then case cons default in prod let prod prod then list
in prod case
    if then if then default if
{
    then begin end default end
}
where prod cons
    then cons where sum let list end cons list
{
    then array in let case begin prod sum list
}
{
    sum let list array end prod prod let then array default
}
end default sum end list default end prod case
{
    sum if in array then where begin cons if let
}
    case end cons let prod end sum let default
    cons where let begin begin if end end
if default where where cons
    begin default where default where list then array where let end let
{
    sum begin case cons
}
{
    begin prod begin let list in
}
    default let in where in
list let end end let let default
prod default begin then default let sum let let then cons case
{
    where then prod default sum sum end sum then where sum sum
}
    array end if begin cons sum then if
array begin default if begin then
    prod let sum begin if list if cons begin let end prod
    default cons array array default if sum
    cons where end
prod where case end
    if begin prod let then
{
    sum if where sum
}
    prod case default sum sum where case if
    in begin then if array array if
{
    list sum cons prod
}
if in let let end let
where case cons where list array let prod sum in where
    prod prod prod prod
    if default where sum default
where where let in array cons default cons
{
    if case array prod if default let end
}
let case then if where end list prod array prod begin
cons case in if begin array sum cons
    case in cons array sum in default begin end sum sum
    in array default in default let cons default end default if let
    sum array end
end begin sum case where sum
{
    let list end end array case
}
then where if case list array prod where array
{
    cons where in where sum array where cons prod default cons
}
prod end default sum let prod
case case sum begin in begin array then end
begin if cons if list prod
{
    array begin let list
}
    prod in if prod cons sum in list if
{
    where list case list begin sum default cons end
}
then where then default
    prod begin case where
then prod cons array let let in
{
    if begin array prod
}
    if list prod sum case in
    begin prod case sum prod in let if in default where
{
    begin prod begin
}
    where array list cons cons
{
    end sum begin cons then list cons cons
}
{
    list cons list list list case case sum
}
    array case default sum let sum if
{
    in sum case let prod if where
}
    array where prod sum list cons
    end default where where cons let where prod begin if
{
    in end case if
}
{
    list prod let let prod cons list let where sum where
}
then where cons if begin if default list case default in
{
    if then if end let
}
    where list if default begin begin default begin let sum prod
let in case cons array in list array begin prod in begin
{
    sum array sum default sum prod if case prod default case
}
list prod prod begin default sum end let
    begin let default prod
list array prod prod if in end then if default prod cons
    begin default prod array prod begin let
    in array in default begin sum case list sum default
    case case end then case
{
    where in list array case list prod if list
}
{
    in begin prod cons default default in end in
}
    begin list if default sum if list
{
    begin sum sum prod
}
{
    case array if cons where
}
sum array where sum list
let case then prod in default let sum let array begin
    array list then if where default where
cons case case list end array cons default let default let then
in prod default begin cons list if list let array then default
{
    begin where if cons prod
}
case let prod let sum prod begin
    cons array array if cons let if
{
    begin prod if cons default let
}
    default prod end
    array list if
{
    default cons if default list begin list list in
}
{
    where end if sum begin if sum default where array end
}
    case in in sum case where list if cons list in
{
    let default cons if let cons where
}
    case then array list let
{
    if array in prod in where let
}
    case case array sum in let array
    array array end sum
    end case array
{
    in default then prod let sum begin if list cons
}
    default begin prod
{
    if let let default sum cons
}
    begin let sum then prod then cons case begin cons
    prod list if let case
    prod sum cons
begin then sum case
prod let in array in let sum if let let sum default
{
    then if end prod where
}
where list default array default let list
    then let list cons where then default end prod default prod
then sum in array in if end begin default
prod begin let where end cons in
{
    then then if case case list sum let where
}
{
    default list where
}
    array then where end begin sum list cons begin where
    case default array sum prod let let where in default
    cons cons then default cons list if where let let
{
    in end then if prod
}
{
    if begin begin where case case array
}
    case array case where where cons default if begin
begin where if prod prod default sum where where if
default default array then in
cons end in end
sum array cons list if begin begin begin begin
{
    then end list if then list
}
    cons prod end end end
{
    case case then
}
sum end array let let
    if list in in array where in list cons case end default
    case where then begin case end then default begin where in end
sum cons list cons let begin
{
    if in end if let case
}
    list cons if case
cons if cons let let begin default then prod array
{
    list list where case if end if where case where
}
{
    list prod sum let
}
    in default if begin array begin then
sum begin in list where
{
    sum array let begin if if end then case let if prod
}
    array list end then list
    end case let case sum sum let
    case let prod begin
    cons sum default list end cons array prod end end in then
array begin begin end sum begin array
default array in in then in
sum case if default if sum let in case begin if
{
    default cons where cons begin list list
}
{
    default end case default then cons list if let default prod
}
let end array default case then let prod case if cons
    cons prod where
{
    if list list
}
    cons default sum end array if default cons let
{
    case case if sum array if
}
{
    prod prod in prod cons default default sum end prod where
}
sum let case end case list
    then sum array case then array in then then
begin prod where
{
    prod prod prod default where if cons case begin case if
}
{
    then array array cons if cons list let where
}
    begin sum where if prod array
    in begin in begin end begin
if prod prod if list let where
case prod cons if
    default case list prod begin end let case list
    begin where in cons begin array prod
in list prod array default
{
    in cons if array prod cons begin case then let list
}
in case array begin case cons array in
{
    let case prod default case
}
{
    let in end if case where where array
}
let end sum cons end
array begin then
list cons cons in end
    if prod then cons let cons list then where begin cons begin
{
    then default begin if begin end case begin cons default
}
    if array array list
    where where sum end let end case if prod sum
{
    then if then sum sum cons begin case case where case let
}
array if list
{
    cons default sum in if in
}
{
    array array sum if where begin sum default array if
}
then if let then end let
    sum let default
begin end where sum case
sum array sum array
prod in in prod cons array in case list
where sum prod
list case cons where where default where
{
    let then sum let let if let where then array begin
}
    default in let then begin
{
    array list where if where begin
}
    let begin prod prod then
end in prod sum if case end begin cons let cons end
    let where array begin list sum end then
case array then if prod list
{
    sum then in
}
    let end default prod sum prod in begin begin case
then let let
    case where cons let cons list array sum list let sum if
    let then prod prod array default in list default prod list case
{
    cons begin then if end where if list prod if end sum
}
begin where if let begin let
{
    sum prod sum case in case list let sum default sum case
}
begin case then end let where sum
{
    default let cons if in if default sum in end then sum
}
cons if cons let then array sum let
    begin where cons end where begin
{
    case if in in if
}
{
    then then begin array
}
list default where begin
end end array case begin prod
    sum let then default then if default sum where list
    cons default begin default prod end sum if where default let end
    where sum prod end sum end where cons
list list where
    where if case default then array begin default
{
    cons default where where
}
sum if cons
    prod case let begin let in let array
{
    let where case in cons sum where
}
{
    array sum begin default array
}
then case end prod prod array
sum case array let array where array
    sum prod array
    in end list default
if then array sum
    where if end array if let end
if end where case case if list then cons array in prod
{
    prod end let array then default array end
}
then end if then
    cons where default default default end
    prod then let let if in let
{
    cons prod then let cons
}
where list sum where begin then case begin
in then default sum where if
{
    where default array then in let default if cons then
}
    begin prod list default prod case where where sum end sum
    let sum list array prod where if in prod then array let
    case array array where default let
    prod case where let sum array list in list
{
    sum end list let list then end let
}
    let in sum cons end array list then array then if list
sum list in end array list prod array default begin prod
    default prod list begin end sum end array case array
array case default case array end begin then where
cons cons case
{
    case where prod prod then array default
}
if where prod if if then let sum then
{
    case where array prod let let
}
{
    case case in sum default end default let case cons
}
    prod default cons
{
    array in begin array let in
}
{
    prod let end array default let cons
}
    if in sum let end if case end
{
    sum in cons cons in cons let case list in begin let
}
    where list list sum
    then list array end cons list default
end array sum let in prod array end
    default list where cons array list prod array then
    list cons prod begin
    begin if prod prod begin list then if begin list where
    list then let end prod begin then end end prod begin
{
    sum list in
}
    begin list let sum then
    array begin cons array prod
sum list case default
in default then if if let prod then
    in list case let if let if array
    list sum where end then cons cons cons case
default if then default if where end array where let case array
{
    if list then if then case array if let end
}
prod if cons let let
    array if where list list sum in begin
array cons array
    array prod list cons if if let
{
    array sum case prod let then default let prod in
}
    then let begin default case let if
prod end in default where let
{
    where default default begin if end default array then let
}
    list array where in default where
{
    default begin then
}
end cons if if case in then prod
{
    end sum prod
}
{
    end list if
}
    case case where list let cons case case in
    cons array in in let in case in
{
    then where begin sum where prod prod sum then prod array let
}
then let in array where then default end cons in then
{
    in list prod in in end
}
cons end let default default if then
{
    if array if then list in in list let
}
{
    array in case list list
}
{
    if begin where sum if if where let cons sum
}
default let let if where then end in array case
default list end list array end case
    begin where if where list array
cons prod sum
where where end begin case begin case begin then where list
{
    case sum default let end array if in array end let
}
{
    array default if let end sum sum where cons
}
    end default where default in if in
    list default begin where case cons case case list default let
{
    list then begin default
}
    end in in sum in cons prod
    prod case end if
begin default sum cons in list end list cons
{
    array case prod if then where
}
{
    let sum let in list where
}
{
    let array begin prod then sum
}
    list where end
    begin begin case in let let array begin array cons
{
    case prod in cons list array end
}
{
    array let let default prod array
}
{
    sum then default let default where prod prod
}
    list case in where prod prod cons
{
    begin let where in then cons
}
prod in case
then sum sum then default case cons in where
{
    end cons let list case
}
{
    in if where end prod in let cons array end
}
array sum where where default
    case if prod where begin list array default default then where begin
{
    then default prod cons list array where
}
    let if where let
in where if where sum then let let then list where
default sum list
    default case cons
    prod list cons in prod cons default
sum case in in
{
    where prod where in array
}
    sum array array begin sum array
then list default prod list begin sum
{
    case default prod let prod if end if
}
in begin begin
where where end prod let
{
    in sum prod sum where in in cons list
}
let default array cons then begin default case sum end in prod
{
    in if array then end list end default
}
if in where sum cons case case list let in array
{
    cons where if
}
    where default prod if begin let prod cons in
{
    begin end where prod list
}
    then end cons default then begin if
    in if then array default cons begin default
{
    case end cons list default let case list in
}
{
    sum begin sum in then then begin list
}
{
    case end in in
}
prod sum begin sum case array where prod list cons case list
{
    array let list list let prod prod begin prod if
}
{
    begin end case begin
}
{
    array sum cons in array list case in array
}
    where if if let
{
    array then then sum let cons default list cons sum default prod
}
    let begin where default cons let where
{
    then cons prod array cons if cons cons in
}
then sum let default cons in then cons let array
    if in let then array in
sum let in end then in cons in end
    end begin begin if cons cons let
{
    case begin default begin prod end prod then in prod list prod
}
{
    sum array array list where array if
}
    prod where sum prod
end array then array sum where
{
    case cons begin default let in in
}
{
    sum case list case array cons
}
    list end end if sum default
    list let cons cons
prod where then if cons sum
{
    cons default case if begin let then sum
}
{
    where begin end end let prod if prod sum case sum
}
    default if cons end
{
    default let case sum default cons let let prod list array
}
then default in then
{
    sum in begin let where cons in cons let
}
in if cons
cons where prod
let array where let cons begin begin cons begin where let
    begin let list let list in prod case cons case
let in let end begin prod where
{
    begin then in
}
array let sum end begin sum list default default
    if let array then in cons where where begin then then
    where then list cons if end default cons where
prod default sum
end sum array
    sum default let list case sum then
    if list then prod case
    array cons default end in where let in list
    then where end begin sum end then where prod
default where case array cons let cons let case
end cons list case prod if prod in default
    cons prod where begin begin default array in end end default prod
sum in cons if end in then then
    begin then in in then in list
    begin default case if prod case
{
    end array cons sum
}
{
    then in array let array cons let prod default where default
}
cons end list array if prod
    where if cons default let sum where end array end where
{
    then in if cons
}
end sum end then list array prod list default array prod if
default cons begin array if in prod
prod sum end default default let array case begin
{
    let begin where let let let case end then list
}
    where cons end in list sum if in cons in array
prod where list if where in
{
    begin then case
}
    end cons array array sum where end end cons let let
{
    let default then prod
}
{
    end default case begin
}
list where case
{
    default list prod then in in list let case cons array
}
sum begin where cons
{
    begin begin prod prod default sum then if
}
{
    cons list if sum array where if prod array default list
}
sum cons end prod let
end list then then if end
    case then let end where prod
{
    default begin where array array array in default in array sum
}
then where if cons case if begin prod
    where end if cons cons end
array sum list begin let where end end end where case
    list begin begin let array if default then default
case cons if let sum prod array sum
list begin prod sum where prod cons in array default cons cons
{
    default sum let array in if
}
end then end default in begin sum then
    prod let sum case sum let where
    if list sum
    array let prod sum if end
{
    cons let in let where array then default
}
{
    where then if end where default in
}
let sum end begin default let begin default where case in prod
{
    let in if cons then prod default
}
let where begin begin
cons then then
    in list begin list sum cons sum list case sum cons
    prod if then then prod end let list begin
end sum let end sum array where begin in case
{
    default cons where in list then sum cons sum
}
then cons cons default end list in
{
    let begin prod where
}
where then begin default then if begin case begin
{
    then then list begin in let case case where
}
array where cons begin case sum array begin
prod case case array let prod list where in case cons if
in sum array array if
    then begin where array case
begin prod array sum
where case prod case end list let in list then default
cons default begin sum
case in cons
where case list if if then
{
    sum array in let case sum
}
    then end case cons cons prod sum array prod default
begin in sum end array end
{
    where then in sum prod begin array in case begin case array
}
{
    default array in let where case then begin cons
}
    where in prod let where
{
    prod begin if let begin
}
default list sum list then prod then cons default array
    list list case case in begin array let
if sum array default prod case end in then
case case end where where list default in array begin
sum where then let then
{
    cons array array case
}
    array case sum begin list list cons prod
{
    case sum list sum if array list
}
sum end case begin list begin cons where where then
{
    default where sum
}
{
    list where if if then cons cons prod in list default sum
}
{
    let cons default
}
{
    end then end in begin case sum
}
let then begin
array case end array default end where
cons prod begin case array array end
{
    let cons cons case cons where default prod
}
{
    where where prod prod if default
}
{
    where prod prod array in
}
{
    case prod sum cons let sum where then
}
{
    let then array begin array then
}
    in if default where then cons array if where if begin
    if array let default sum
{
    where array case prod let
}
    sum end begin let begin begin where case then
case begin then list case if array case
    in where sum
{
    cons then where if default
}
{
    cons cons sum
}
if in prod in
{
    sum list list array begin case then begin in
}
{
    in case default case default array
}
    end array prod where array if
{
    default default then array array
}
sum if if default
let array default in array in
let end if end then cons let case in let case
    list then list sum cons cons begin case cons prod where begin
{
    default end where begin in begin begin then begin where array where
}
{
    end cons list cons list cons sum then
}
    in begin begin
    then begin prod prod if default let sum then list let array
default default cons sum where sum then let array array prod sum
    prod end default where prod
    case then begin
    array let in then list in in default end where if
{
    array cons let if if array where where
}
if let end
    cons if case let end
array list list array in cons end
{
    if sum begin let default case default if end sum let array
}
{
    prod in cons default then let list default prod
}
default let sum if
    default where end prod sum
where sum if case
    if array prod sum end then cons let prod list default default
    if where then end
{
    sum cons prod sum in case end where prod array if
}
    where then array begin in if let
end where cons prod cons case begin
cons prod list cons prod
{
    in where case in prod array case where
}
    cons array cons cons sum let then array let
{
    array where in end
}
    let array in prod if default sum in let case list
    cons cons in prod where default if case default default begin list
{
    if default prod in in begin
}
array in case sum if let case where in
if list end prod case begin in where array begin
    cons in prod default end end
    begin list let then prod begin sum in case then begin
cons end prod array let in
sum then default if where array case default if end list then
in cons if list cons let begin in prod let
    where then cons prod sum then cons array list sum where begin
    sum end sum
    list then end case list then default default end sum
let list begin cons list default default if sum in let
    let let then where in
    where then array in case
    array array list
list where case then where array sum default where in default
cons default then case end cons cons if where
    array case array array then
{
    where if sum where in list if where
}
    array where array if cons cons cons begin begin
{
    prod default cons sum case prod
}
{
    end case prod sum
}
{
    in case array array list begin sum
}
{
    in cons end if sum
}
list case begin if cons where list in list sum
{
    sum if if
}
    let begin prod begin begin list case end end end then
    then let cons list list begin sum array then let in list
sum list list then end if default prod in let in
    default case then begin default array cons
{
    where end in
}
{
    let list case default array list
}
{
    case list array where sum array in then cons then in sum
}
list end list prod begin default where begin cons
{
    then then if prod then
}
    list end case sum let end where list prod where array
    where sum begin in then if prod then in then prod
    default list array where begin if default default cons
    let list in list cons prod begin
    case sum where let array where where begin sum begin
{
    begin if cons list where where case then where
}
sum if let array then then begin where begin
    end array case cons let sum
where where cons in case in then then begin begin
{
    default then where begin begin let then if let
}
end default sum end
{
    case in if end end end if
}
    cons case in then case list let
    default case cons let prod then case then
{
    default case case sum where array prod list end
}
{
    cons sum begin where if sum begin prod then if
}
    prod array array prod cons case array
{
    begin end let begin
}
then where case if cons where begin then sum default let then
if in begin in if
    if default case default let let in case list case prod
list let let
    in begin let cons cons let where end array
    let array if case sum where list list cons
{
    in where let in sum
}
{
    if then end cons list array cons begin
}
begin if case let
    let case begin case case prod prod
sum list cons where let
    array if array end in list then list
let let cons begin default
    in in end list then array then